// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  CategoriesReadCategoriesData,
  CategoriesReadCategoriesResponse,
  CategoriesCreateCategoryData,
  CategoriesCreateCategoryResponse,
  CategoriesReadCategoryData,
  CategoriesReadCategoryResponse,
  CategoriesUpdateCategoryData,
  CategoriesUpdateCategoryResponse,
  CategoriesDeleteCategoryData,
  CategoriesDeleteCategoryResponse,
  CollectionsReadCollectionsData,
  CollectionsReadCollectionsResponse,
  CollectionsCreateCollectionData,
  CollectionsCreateCollectionResponse,
  CollectionsReadCollectionByIdData,
  CollectionsReadCollectionByIdResponse,
  CollectionsUpdateCollectionData,
  CollectionsUpdateCollectionResponse,
  CollectionsDeleteCollectionData,
  CollectionsDeleteCollectionResponse,
  CollectionsReadCollectionByOrderData,
  CollectionsReadCollectionByOrderResponse,
  CollectionsUpdateCollectionOrderData,
  CollectionsUpdateCollectionOrderResponse,
  GiftsReadGiftsData,
  GiftsReadGiftsResponse,
  GiftsCreateGiftData,
  GiftsCreateGiftResponse,
  GiftsReadGiftByIdData,
  GiftsReadGiftByIdResponse,
  GiftsUpdateGiftData,
  GiftsUpdateGiftResponse,
  GiftsDeleteGiftData,
  GiftsDeleteGiftResponse,
  GiftsReadGiftByOrderData,
  GiftsReadGiftByOrderResponse,
  GiftsUpdateGiftOrderData,
  GiftsUpdateGiftOrderResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginTestTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  OrdersReadOrdersData,
  OrdersReadOrdersResponse,
  OrdersCreateOrderData,
  OrdersCreateOrderResponse,
  OrdersReadOrderData,
  OrdersReadOrderResponse,
  OrdersDeleteOrderData,
  OrdersDeleteOrderResponse,
  PaymentsCreatePaymentData,
  PaymentsCreatePaymentResponse,
  PaymentsPersonalWebhookResponse,
  PaymentsPublicKeyResponse,
  PaymentsPaymentStatusData,
  PaymentsPaymentStatusResponse,
  PaymentsPaymentCallbackData,
  PaymentsPaymentCallbackResponse,
  PrivateCreateUserData,
  PrivateCreateUserResponse,
  ProductsReadProductsData,
  ProductsReadProductsResponse,
  ProductsCreateProductData,
  ProductsCreateProductResponse,
  ProductsReadProductsByCategoryData,
  ProductsReadProductsByCategoryResponse,
  ProductsReadProductsByCollectionData,
  ProductsReadProductsByCollectionResponse,
  ProductsReadProductData,
  ProductsReadProductResponse,
  ProductsUpdateProductData,
  ProductsUpdateProductResponse,
  ProductsDeleteProductData,
  ProductsDeleteProductResponse,
  ProductsUpdateProductOrderData,
  ProductsUpdateProductOrderResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersReadUserMeResponse,
  UsersDeleteUserMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersUpdateUserData,
  UsersUpdateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserResponse,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
  UtilsHealthCheckResponse,
} from "./types.gen"

export class CategoriesService {
  /**
   * Read Categories
   * Retrieve categories.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns ProductCategoriesPublic Successful Response
   * @throws ApiError
   */
  public static readCategories(
    data: CategoriesReadCategoriesData = {},
  ): CancelablePromise<CategoriesReadCategoriesResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/categories/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Category
   * Create new product category.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns ProductCategoryPublic Successful Response
   * @throws ApiError
   */
  public static createCategory(
    data: CategoriesCreateCategoryData,
  ): CancelablePromise<CategoriesCreateCategoryResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/categories/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Category
   * Get product category by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns ProductCategoryPublic Successful Response
   * @throws ApiError
   */
  public static readCategory(
    data: CategoriesReadCategoryData,
  ): CancelablePromise<CategoriesReadCategoryResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/categories/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Category
   * Update an category.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns ProductCategoryPublic Successful Response
   * @throws ApiError
   */
  public static updateCategory(
    data: CategoriesUpdateCategoryData,
  ): CancelablePromise<CategoriesUpdateCategoryResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/categories/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Category
   * Delete a category.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteCategory(
    data: CategoriesDeleteCategoryData,
  ): CancelablePromise<CategoriesDeleteCategoryResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/categories/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class CollectionsService {
  /**
   * Read Collections
   * Retrieve collections.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns CollectionsPublic Successful Response
   * @throws ApiError
   */
  public static readCollections(
    data: CollectionsReadCollectionsData = {},
  ): CancelablePromise<CollectionsReadCollectionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/collections/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Collection
   * Create new collection.
   * @param data The data for the request.
   * @param data.formData
   * @returns CollectionPublic_Output Successful Response
   * @throws ApiError
   */
  public static createCollection(
    data: CollectionsCreateCollectionData,
  ): CancelablePromise<CollectionsCreateCollectionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/collections/",
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Collection By Id
   * Get collection by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns CollectionPublic_Output Successful Response
   * @throws ApiError
   */
  public static readCollectionById(
    data: CollectionsReadCollectionByIdData,
  ): CancelablePromise<CollectionsReadCollectionByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/collections/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Collection
   * Update a collection.
   * @param data The data for the request.
   * @param data.id
   * @param data.formData
   * @returns CollectionPublic_Output Successful Response
   * @throws ApiError
   */
  public static updateCollection(
    data: CollectionsUpdateCollectionData,
  ): CancelablePromise<CollectionsUpdateCollectionResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/collections/{id}",
      path: {
        id: data.id,
      },
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Collection
   * Delete a collection.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteCollection(
    data: CollectionsDeleteCollectionData,
  ): CancelablePromise<CollectionsDeleteCollectionResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/collections/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Collection By Order
   * Get collection by order.
   * @param data The data for the request.
   * @param data.order
   * @returns CollectionPublic_Output Successful Response
   * @throws ApiError
   */
  public static readCollectionByOrder(
    data: CollectionsReadCollectionByOrderData,
  ): CancelablePromise<CollectionsReadCollectionByOrderResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/collections/order/",
      query: {
        order: data.order,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Collection Order
   * Update a collection order with nearest one (-1 or +1).
   * @param data The data for the request.
   * @param data.id
   * @param data.formData
   * @returns CollectionPublic_Output Successful Response
   * @throws ApiError
   */
  public static updateCollectionOrder(
    data: CollectionsUpdateCollectionOrderData,
  ): CancelablePromise<CollectionsUpdateCollectionOrderResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/collections/update-order/{id}",
      path: {
        id: data.id,
      },
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class GiftsService {
  /**
   * Read Gifts
   * Retrieve gifts.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns GiftsPublic Successful Response
   * @throws ApiError
   */
  public static readGifts(
    data: GiftsReadGiftsData = {},
  ): CancelablePromise<GiftsReadGiftsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/gifts/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Gift
   * Create new gift.
   * @param data The data for the request.
   * @param data.formData
   * @returns GiftPublic Successful Response
   * @throws ApiError
   */
  public static createGift(
    data: GiftsCreateGiftData,
  ): CancelablePromise<GiftsCreateGiftResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/gifts/",
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Gift By Id
   * Get gift by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns GiftPublic Successful Response
   * @throws ApiError
   */
  public static readGiftById(
    data: GiftsReadGiftByIdData,
  ): CancelablePromise<GiftsReadGiftByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/gifts/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Gift
   * Update a gift.
   * @param data The data for the request.
   * @param data.id
   * @param data.formData
   * @returns GiftPublic Successful Response
   * @throws ApiError
   */
  public static updateGift(
    data: GiftsUpdateGiftData,
  ): CancelablePromise<GiftsUpdateGiftResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/gifts/{id}",
      path: {
        id: data.id,
      },
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Gift
   * Delete a gift.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteGift(
    data: GiftsDeleteGiftData,
  ): CancelablePromise<GiftsDeleteGiftResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/gifts/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Gift By Order
   * Get gift by order.
   * @param data The data for the request.
   * @param data.order
   * @returns GiftPublic Successful Response
   * @throws ApiError
   */
  public static readGiftByOrder(
    data: GiftsReadGiftByOrderData,
  ): CancelablePromise<GiftsReadGiftByOrderResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/gifts/order/",
      query: {
        order: data.order,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Gift Order
   * Update a gift order with nearest one (-1 or +1).
   * @param data The data for the request.
   * @param data.id
   * @param data.formData
   * @returns GiftPublic Successful Response
   * @throws ApiError
   */
  public static updateGiftOrder(
    data: GiftsUpdateGiftOrderData,
  ): CancelablePromise<GiftsUpdateGiftOrderResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/gifts/update-order/{id}",
      path: {
        id: data.id,
      },
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns string Successful Response
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: LoginRecoverPasswordHtmlContentData,
  ): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class OrdersService {
  /**
   * Read Orders
   * Retrieve orders.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns OrdersPublic Successful Response
   * @throws ApiError
   */
  public static readOrders(
    data: OrdersReadOrdersData = {},
  ): CancelablePromise<OrdersReadOrdersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/orders/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Order
   * Create new order.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns OrderPublic Successful Response
   * @throws ApiError
   */
  public static createOrder(
    data: OrdersCreateOrderData,
  ): CancelablePromise<OrdersCreateOrderResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/orders/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Order
   * Get order by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns OrderPublic Successful Response
   * @throws ApiError
   */
  public static readOrder(
    data: OrdersReadOrderData,
  ): CancelablePromise<OrdersReadOrderResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/orders/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Order
   * Delete an order.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteOrder(
    data: OrdersDeleteOrderData,
  ): CancelablePromise<OrdersDeleteOrderResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/orders/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class PaymentsService {
  /**
   * Create Payment
   * @param data The data for the request.
   * @param data.requestBody
   * @returns PaymentResponse Successful Response
   * @throws ApiError
   */
  public static createPayment(
    data: PaymentsCreatePaymentData,
  ): CancelablePromise<PaymentsCreatePaymentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/payments/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Personal Webhook
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static personalWebhook(): CancelablePromise<PaymentsPersonalWebhookResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/payments/personal-webhook",
    })
  }

  /**
   * Public Key
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static publicKey(): CancelablePromise<PaymentsPublicKeyResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/payments/public-key",
    })
  }

  /**
   * Payment Status
   * Get product by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static paymentStatus(
    data: PaymentsPaymentStatusData,
  ): CancelablePromise<PaymentsPaymentStatusResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/payments/status/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Payment Callback
   * Monobank Payment Callback
   * @param data The data for the request.
   * @param data.xSign
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static paymentCallback(
    data: PaymentsPaymentCallbackData,
  ): CancelablePromise<PaymentsPaymentCallbackResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/payments/callback",
      headers: {
        "x-sign": data.xSign,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class PrivateService {
  /**
   * Create User
   * Create a new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: PrivateCreateUserData,
  ): CancelablePromise<PrivateCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/private/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class ProductsService {
  /**
   * Read Products
   * Retrieve products.
   * @param data The data for the request.
   * @param data.collectionId
   * @param data.categoryId
   * @param data.isGift
   * @param data.skip
   * @param data.limit
   * @returns ProductsPublic Successful Response
   * @throws ApiError
   */
  public static readProducts(
    data: ProductsReadProductsData = {},
  ): CancelablePromise<ProductsReadProductsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/products/",
      query: {
        collection_id: data.collectionId,
        category_id: data.categoryId,
        is_gift: data.isGift,
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Product
   * Create new product.
   * @param data The data for the request.
   * @param data.formData
   * @returns ProductPublic Successful Response
   * @throws ApiError
   */
  public static createProduct(
    data: ProductsCreateProductData,
  ): CancelablePromise<ProductsCreateProductResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/products/",
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Products By Category
   * Retrieve products by category.
   * @param data The data for the request.
   * @param data.id
   * @returns ProductsPublic Successful Response
   * @throws ApiError
   */
  public static readProductsByCategory(
    data: ProductsReadProductsByCategoryData,
  ): CancelablePromise<ProductsReadProductsByCategoryResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/products/category/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Products By Collection
   * Retrieve products by collection.
   * @param data The data for the request.
   * @param data.id
   * @param data.skip
   * @param data.limit
   * @param data.excludeProductId
   * @returns ProductsPublic Successful Response
   * @throws ApiError
   */
  public static readProductsByCollection(
    data: ProductsReadProductsByCollectionData,
  ): CancelablePromise<ProductsReadProductsByCollectionResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/products/collection/{id}",
      path: {
        id: data.id,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
        exclude_product_id: data.excludeProductId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Product
   * Get product by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns ProductPublic Successful Response
   * @throws ApiError
   */
  public static readProduct(
    data: ProductsReadProductData,
  ): CancelablePromise<ProductsReadProductResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/products/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Product
   * @param data The data for the request.
   * @param data.id
   * @param data.formData
   * @returns ProductPublic Successful Response
   * @throws ApiError
   */
  public static updateProduct(
    data: ProductsUpdateProductData,
  ): CancelablePromise<ProductsUpdateProductResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/products/{id}",
      path: {
        id: data.id,
      },
      formData: data.formData,
      mediaType: "multipart/form-data",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Product
   * Delete an product.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteProduct(
    data: ProductsDeleteProductData,
  ): CancelablePromise<ProductsDeleteProductResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/products/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Product Order
   * Update a product order with nearest one (-1 or +1).
   * @param data The data for the request.
   * @param data.id
   * @param data.formData
   * @returns ProductPublic Successful Response
   * @throws ApiError
   */
  public static updateProductOrder(
    data: ProductsUpdateProductOrderData,
  ): CancelablePromise<ProductsUpdateProductOrderResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/products/update-order/{id}",
      path: {
        id: data.id,
      },
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   * @param data The data for the request.
   * @param data.emailTo
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static testEmail(
    data: UtilsTestEmailData,
  ): CancelablePromise<UtilsTestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/utils/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }
}
