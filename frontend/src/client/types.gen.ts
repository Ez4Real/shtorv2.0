// This file is auto-generated by @hey-api/openapi-ts

export type Address = {
  country: string
  first_name: string
  last_name: string
  address: string
  additional?: string | null
  postal_code: string
  city: string
  phone: string
}

export type Body_collections_create_collection = {
  collection: CollectionBase
  banner_desktop: Blob | File
  banner_mobile: Blob | File
}

export type Body_collections_update_collection = {
  collection: CollectionBase
  banner_desktop?: (Blob | File) | null
  banner_mobile?: (Blob | File) | null
}

export type Body_collections_update_collection_order = {
  order_shift: number
}

export type Body_gifts_create_gift = {
  gift: GiftBase
  image: Blob | File
}

export type Body_gifts_update_gift = {
  gift: GiftUpdateBase
  image?: (Blob | File) | null
}

export type Body_gifts_update_gift_order = {
  order_shift: number
}

export type Body_login_login_access_token = {
  grant_type?: string | null
  username: string
  password: string
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

export type Body_products_create_product = {
  product: ProductBase
  images: Array<Blob | File>
}

export type Body_products_update_product = {
  product: UpdateBase
  images?: Array<Blob | File> | null
}

export type Body_products_update_product_order = {
  order_shift: number
}

export type CertificateType = "physical" | "digital"

export type CollectionBannerPublic = {
  url: string
  alt_text?: string | null
  id: string
  device_type: DeviceType
}

export type CollectionBase = {
  title: string
}

export type CollectionPublic_Input = {
  title: string
  id: string
  created_at: string
  order: number
  banner_desktop: CollectionBannerPublic
  banner_mobile: CollectionBannerPublic
}

export type CollectionPublic_Output = {
  title: string
  id: string
  created_at: string
  order: number
  banner_desktop: CollectionBannerPublic
  banner_mobile: CollectionBannerPublic
}

export type CollectionsPublic = {
  data: Array<CollectionPublic_Output>
  count: number
  min_order: number
  max_order: number
}

export type Currency = "uah" | "usd" | "eur"

export type DeviceType = "desktop" | "mobile"

export type GiftBannerPublic = {
  url: string
  alt_text?: string | null
  id: string
}

export type GiftBase = {
  title_en: string
  title_uk: string
  description_en: string
  description_uk: string
  price_usd: number
  price_uah: number
  price_eur: number
  dynamic_price?: boolean
}

export type GiftCartItem = {
  id: string
  title_en: string
  title_uk: string
  price_usd: number
  price_uah: number
  price_eur: number
  type?: "gift"
  images: Array<GiftBannerPublic>
  certificate_type: CertificateType
}

export type type = "gift"

export type GiftPublic = {
  title_en: string
  title_uk: string
  description_en: string
  description_uk: string
  price_usd: number
  price_uah: number
  price_eur: number
  dynamic_price?: boolean
  id: string
  created_at: string
  order: number
  image: GiftBannerPublic
}

export type GiftsPublic = {
  data: Array<GiftPublic>
  count: number
  min_order: number
  max_order: number
}

export type GiftUpdateBase = {
  title_en?: string | null
  title_uk?: string | null
  description_en?: string | null
  description_uk?: string | null
  price_usd?: number | null
  price_uah?: number | null
  price_eur?: number | null
  dynamic_price?: boolean | null
}

export type HTTPValidationError = {
  detail?: Array<ValidationError>
}

export type MerchantPaymentInfo = {
  reference: string
  destination: string
  comment?: string | null
  customerEmails: Array<string>
  basketOrder: Array<PaymentBasketItem>
}

export type Message = {
  message: string
}

export type NewPassword = {
  token: string
  new_password: string
}

export type OrderBasketItem_Input = {
  icon: string
  unit?: string
  code: string
  qty: number
  id: string
  data: ProductCartItem_Input | GiftCartItem
}

export type OrderBasketItem_Output = {
  icon: string
  unit?: string
  code: string
  qty: number
  id: string
  data: ProductCartItem_Output | GiftCartItem
}

export type OrderCreate = {
  email: string
  delivery_address: Address
  billing_address?: Address | null
  shipping_method: ShippingMethods
  mailing?: boolean
  comment: string | null
  payment_status?: PaymentStatus
  created_at?: string
  modified_date?: string
  amount: number
  currency: Currency
  basketOrder: Array<OrderBasketItem_Input>
  invoiceId: string
}

export type OrderPublic = {
  email: string
  delivery_address: Address
  billing_address?: Address | null
  shipping_method: ShippingMethods
  mailing?: boolean
  comment: string | null
  payment_status?: PaymentStatus
  created_at: string
  modified_date: string
  amount: number
  currency: Currency
  basketOrder: Array<OrderBasketItem_Output>
  id: string
  invoiceId: string
}

export type OrdersPublic = {
  data: Array<OrderPublic>
  count: number
}

export type PaymentBasketItem = {
  icon: string
  unit?: string
  code: string
  qty: number
  name: string
  sum: number
  total: number
}

export type PaymentCreate = {
  amount: number
  ccy: number
  merchantPaymInfo: MerchantPaymentInfo
  redirectUrl?: string | null
  webHookUrl?: string | null
  validity?: number | null
  paymentType?: string | null
  qrId?: string | null
  code?: string | null
  displayType?: string | null
}

export type PaymentResponse = {
  invoiceId: string
  pageUrl: string
}

export type PaymentStatus =
  | "created"
  | "processing"
  | "hold"
  | "success"
  | "failure"
  | "reversed"
  | "expired"

export type PrivateUserCreate = {
  email: string
  password: string
  full_name: string
  is_verified?: boolean
}

export type ProductAttachment = {
  name: ProductAttachmentType
  price_usd: number
  price_uah: number
  price_eur: number
}

export type ProductAttachmentType = "silver-orbit" | "silver-chain"

export type ProductBase = {
  sizes?: Array<string> | null
  title_en: string
  title_uk: string
  description_en: string
  description_uk: string
  category_id: string
  collection_id: string
  price_usd: number
  price_uah: number
  price_eur: number
  attachment?: boolean
  is_gift?: boolean
}

export type ProductCartItem_Input = {
  id: string
  title_en: string
  title_uk: string
  price_usd: number
  price_uah: number
  price_eur: number
  type?: "product"
  description_en: string
  description_uk: string
  collection: CollectionPublic_Input
  category: ProductCategoryPublic
  images: Array<ProductImage>
  size: string | null
  attachment: ProductAttachment | null
}

export type type2 = "product"

export type ProductCartItem_Output = {
  id: string
  title_en: string
  title_uk: string
  price_usd: number
  price_uah: number
  price_eur: number
  type?: "product"
  description_en: string
  description_uk: string
  collection: CollectionPublic_Output
  category: ProductCategoryPublic
  images: Array<ProductImage>
  size: string | null
  attachment: ProductAttachment | null
}

export type ProductCategoriesPublic = {
  data: Array<ProductCategoryPublic>
  count: number
}

export type ProductCategoryCreate = {
  title_en: string
  title_uk: string
}

export type ProductCategoryPublic = {
  title_en: string
  title_uk: string
  id: string
  created_at: string
}

export type ProductCategoryUpdate = {
  title_en?: string | null
  title_uk?: string | null
}

export type ProductImage = {
  url: string
  alt_text?: string | null
  id?: string
  product_id: string
  order?: number
}

export type ProductPublic = {
  sizes?: Array<string> | null
  title_en: string
  title_uk: string
  description_en: string
  description_uk: string
  category_id: string
  collection_id: string
  price_usd: number
  price_uah: number
  price_eur: number
  attachment?: boolean
  is_gift?: boolean
  id: string
  owner_id: string
  created_at: string
  order: number
  collection: CollectionPublic_Output
  category: ProductCategoryPublic
  images: Array<ProductImage>
}

export type ProductsPublic = {
  data: Array<ProductPublic>
  count: number
  min_order: number | null
  max_order: number | null
}

export type ShippingMethods = "ups_express" | "nova_post"

export type Token = {
  access_token: string
  token_type?: string
}

export type UpdateBase = {
  sizes?: Array<string> | null
  title_en?: string | null
  title_uk?: string | null
  description_en?: string | null
  description_uk?: string | null
  category_id?: string | null
  collection_id?: string | null
  price_usd?: number | null
  price_uah?: number | null
  price_eur?: number | null
  attachment?: boolean | null
  is_gift?: boolean | null
}

export type UpdatePassword = {
  current_password: string
  new_password: string
}

export type UserCreate = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  password: string
}

export type UserPublic = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  id: string
}

export type UserRegister = {
  email: string
  password: string
  full_name?: string | null
}

export type UsersPublic = {
  data: Array<UserPublic>
  count: number
}

export type UserUpdate = {
  email?: string | null
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  password?: string | null
}

export type UserUpdateMe = {
  full_name?: string | null
  email?: string | null
}

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type CategoriesReadCategoriesData = {
  limit?: number
  skip?: number
}

export type CategoriesReadCategoriesResponse = ProductCategoriesPublic

export type CategoriesCreateCategoryData = {
  requestBody: ProductCategoryCreate
}

export type CategoriesCreateCategoryResponse = ProductCategoryPublic

export type CategoriesReadCategoryData = {
  id: string
}

export type CategoriesReadCategoryResponse = ProductCategoryPublic

export type CategoriesUpdateCategoryData = {
  id: string
  requestBody: ProductCategoryUpdate
}

export type CategoriesUpdateCategoryResponse = ProductCategoryPublic

export type CategoriesDeleteCategoryData = {
  id: string
}

export type CategoriesDeleteCategoryResponse = Message

export type CollectionsReadCollectionsData = {
  limit?: number
  skip?: number
}

export type CollectionsReadCollectionsResponse = CollectionsPublic

export type CollectionsCreateCollectionData = {
  formData: Body_collections_create_collection
}

export type CollectionsCreateCollectionResponse = CollectionPublic_Output

export type CollectionsReadCollectionByIdData = {
  id: string
}

export type CollectionsReadCollectionByIdResponse = CollectionPublic_Output

export type CollectionsUpdateCollectionData = {
  formData: Body_collections_update_collection
  id: string
}

export type CollectionsUpdateCollectionResponse = CollectionPublic_Output

export type CollectionsDeleteCollectionData = {
  id: string
}

export type CollectionsDeleteCollectionResponse = Message

export type CollectionsReadCollectionByOrderData = {
  order: number
}

export type CollectionsReadCollectionByOrderResponse = CollectionPublic_Output

export type CollectionsUpdateCollectionOrderData = {
  formData: Body_collections_update_collection_order
  id: string
}

export type CollectionsUpdateCollectionOrderResponse = CollectionPublic_Output

export type GiftsReadGiftsData = {
  limit?: number
  skip?: number
}

export type GiftsReadGiftsResponse = GiftsPublic

export type GiftsCreateGiftData = {
  formData: Body_gifts_create_gift
}

export type GiftsCreateGiftResponse = GiftPublic

export type GiftsReadGiftByIdData = {
  id: string
}

export type GiftsReadGiftByIdResponse = GiftPublic

export type GiftsUpdateGiftData = {
  formData: Body_gifts_update_gift
  id: string
}

export type GiftsUpdateGiftResponse = GiftPublic

export type GiftsDeleteGiftData = {
  id: string
}

export type GiftsDeleteGiftResponse = Message

export type GiftsReadGiftByOrderData = {
  order: number
}

export type GiftsReadGiftByOrderResponse = GiftPublic

export type GiftsUpdateGiftOrderData = {
  formData: Body_gifts_update_gift_order
  id: string
}

export type GiftsUpdateGiftOrderResponse = GiftPublic

export type LoginLoginAccessTokenData = {
  formData: Body_login_login_access_token
}

export type LoginLoginAccessTokenResponse = Token

export type LoginTestTokenResponse = UserPublic

export type LoginRecoverPasswordData = {
  email: string
}

export type LoginRecoverPasswordResponse = Message

export type LoginResetPasswordData = {
  requestBody: NewPassword
}

export type LoginResetPasswordResponse = Message

export type LoginRecoverPasswordHtmlContentData = {
  email: string
}

export type LoginRecoverPasswordHtmlContentResponse = string

export type OrdersReadOrdersData = {
  limit?: number
  skip?: number
}

export type OrdersReadOrdersResponse = OrdersPublic

export type OrdersCreateOrderData = {
  requestBody: OrderCreate
}

export type OrdersCreateOrderResponse = OrderPublic

export type OrdersReadOrderData = {
  id: string
}

export type OrdersReadOrderResponse = OrderPublic

export type OrdersDeleteOrderData = {
  id: string
}

export type OrdersDeleteOrderResponse = Message

export type PaymentsCreatePaymentData = {
  requestBody: PaymentCreate
}

export type PaymentsCreatePaymentResponse = PaymentResponse

export type PaymentsPersonalWebhookResponse = unknown

export type PaymentsPublicKeyResponse = unknown

export type PaymentsPaymentStatusData = {
  id: string
}

export type PaymentsPaymentStatusResponse = unknown

export type PaymentsPaymentCallbackData = {
  xSign: string
}

export type PaymentsPaymentCallbackResponse = unknown

export type PrivateCreateUserData = {
  requestBody: PrivateUserCreate
}

export type PrivateCreateUserResponse = UserPublic

export type ProductsReadProductsData = {
  categoryId?: string | null
  collectionId?: string | null
  isGift?: boolean | null
  limit?: number
  skip?: number
}

export type ProductsReadProductsResponse = ProductsPublic

export type ProductsCreateProductData = {
  formData: Body_products_create_product
}

export type ProductsCreateProductResponse = ProductPublic

export type ProductsReadProductsByCategoryData = {
  id: string
}

export type ProductsReadProductsByCategoryResponse = ProductsPublic

export type ProductsReadProductsByCollectionData = {
  excludeProductId?: string | null
  id: string
  limit?: number
  skip?: number
}

export type ProductsReadProductsByCollectionResponse = ProductsPublic

export type ProductsReadProductData = {
  id: string
}

export type ProductsReadProductResponse = ProductPublic

export type ProductsUpdateProductData = {
  formData: Body_products_update_product
  id: string
}

export type ProductsUpdateProductResponse = ProductPublic

export type ProductsDeleteProductData = {
  id: string
}

export type ProductsDeleteProductResponse = Message

export type ProductsUpdateProductOrderData = {
  formData: Body_products_update_product_order
  id: string
}

export type ProductsUpdateProductOrderResponse = ProductPublic

export type UsersReadUsersData = {
  limit?: number
  skip?: number
}

export type UsersReadUsersResponse = UsersPublic

export type UsersCreateUserData = {
  requestBody: UserCreate
}

export type UsersCreateUserResponse = UserPublic

export type UsersReadUserMeResponse = UserPublic

export type UsersDeleteUserMeResponse = Message

export type UsersUpdateUserMeData = {
  requestBody: UserUpdateMe
}

export type UsersUpdateUserMeResponse = UserPublic

export type UsersUpdatePasswordMeData = {
  requestBody: UpdatePassword
}

export type UsersUpdatePasswordMeResponse = Message

export type UsersRegisterUserData = {
  requestBody: UserRegister
}

export type UsersRegisterUserResponse = UserPublic

export type UsersReadUserByIdData = {
  userId: string
}

export type UsersReadUserByIdResponse = UserPublic

export type UsersUpdateUserData = {
  requestBody: UserUpdate
  userId: string
}

export type UsersUpdateUserResponse = UserPublic

export type UsersDeleteUserData = {
  userId: string
}

export type UsersDeleteUserResponse = Message

export type UtilsTestEmailData = {
  emailTo: string
}

export type UtilsTestEmailResponse = Message

export type UtilsHealthCheckResponse = boolean
